# Find the CUnit includes and library
#
# This module defines
#
# for C interface:
#
# LIBCONFIG_C_INCLUDE_DIR, where to find include files.
# LIBCONFIG_C_LIBRARIES, the libraries to link against
# LIBCONFIG_C_FOUND
#
# for C++ interface:
#
# LIBCONFIG_CPP_INCLUDE_DIR, where to find cppunit include files, etc.
# LIBCONFIG_CPP_LIBRARIES, the libraries to link against to use CppUnit.
# LIBCONFIG_CPP_FOUND, If false, do not try to use CppUnit.



#SEARCHING FOR C INTERFACE:

FIND_PATH(LIBCONFIG_C_INCLUDE_DIR 
   NAME libconfig.h
   HINTS /usr/local/include /usr/include ${LIBCONFIG_ROOT_PATH}/include
)

FIND_LIBRARY(LIBCONFIG_C_LIBRARY 
  NAME libconfig.so 
  HINTS /usr/local/lib /usr/lib /usr/lib64/ ${LIBCONFIG_ROOT_PATH}/lib
)


IF(LIBCONFIG_C_INCLUDE_DIR AND LIBCONFIG_C_LIBRARY)
    SET(LIBCONFIG_C_FOUND TRUE)
    SET(LIBCONFIG_C_LIBRARIES ${LIBCONFIG_C_LIBRARY})
ENDIF(LIBCONFIG_C_INCLUDE_DIR AND LIBCONFIG_C_LIBRARY)


#SEARCHING FOR CPP INTERFACE:


FIND_PATH(LIBCONFIG_CPP_INCLUDE_DIR 
  NAME libconfig.h++
  HINTS /usr/local/include /usr/include ${LIBCONFIG_ROOT_PATH}/include
)


FIND_LIBRARY(LIBCONFIG_CPP_LIBRARY 
  NAME libconfig++.so
  HINTS /usr/local/lib /usr/lib /usr/lib64/ ${LIBCONFIG_ROOT_PATH}/lib
)


IF(LIBCONFIG_CPP_INCLUDE_DIR AND LIBCONFIG_CPP_LIBRARY)
    SET(LIBCONFIG_CPP_FOUND TRUE)
    SET(LIBCONFIG_CPP_LIBRARIES ${LIBCONFIG_CPP_LIBRARY})
ENDIF(LIBCONFIG_CPP_INCLUDE_DIR AND LIBCONFIG_CPP_LIBRARY)



IF (LIBCONFIG_CPP_FOUND)
   IF (NOT LibConfig_FIND_QUIETLY)
      MESSAGE(STATUS "LibConfig++: ${LIBCONFIG_CPP_LIBRARIES}" )
      MESSAGE(STATUS "LibConfig: ${LIBCONFIG_C_LIBRARIES}")
   ENDIF (NOT LibConfig_FIND_QUIETLY)
ELSE (LIBCONFIG_CPP_FOUND)
   IF (LibConfig_FIND_REQUIRED)
      MESSAGE(SEND_ERROR "Could NOT find LibConfig")
   ENDIF (LibConfig_FIND_REQUIRED)
ENDIF (LIBCONFIG_CPP_FOUND)

MARK_AS_ADVANCED(LIBCONFIG_C_INCLUDE_DIR LIBCONFIG_C_LIBRARY)
MARK_AS_ADVANCED(LIBCONFIG_CPP_INCLUDE_DIR LIBCONFIG_CPP_LIBRARY)
